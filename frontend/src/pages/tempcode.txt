***** findateammate.jsx file *******************************
 // const handleConnect = async (user) => {
  //   if (!currentUser) {
  //     alert("Please log in to connect with users.");
  //     return;
  //   }

  //   const payload = {
  //     admin: currentUser,
  //     members: [currentUser, user.username],
  //     spaceName: `${currentUser}-${user.username}`,
  //     chatPic: user.profilePic || profile_img,
  //   };

  //   try {
  //     const response = await axios.post(`${import.meta.env.VITE_REACT_APP_BACKEND_URL}/space/create-space`, payload);
  //     if (response.status === 200) {
  //       alert(`You are now connected with ${user.fullname}!`);
  //     }
  //   } catch (error) {
  //     console.error("Error connecting with user", error);
  //     alert("Failed to connect. Please try again later.");
  //   }
  // };

   {/* <button
                    onClick={() => handleConnect(user)}
                    className="connect-btn"
                    disabled={!user.available}
                  >
                    Connect
                  </button> */}

feeds.jsx file
 // const fetchUserDetails = async () => {
  //   try {
  //     const res = await Axios.get(
  //       `${import.meta.env.VITE_REACT_APP_BACKEND_URL}/user/getUser/${username}`
  //     );
  //     setUserDetails(res.data);
  //   } catch (err) {
  //     console.error("Error fetching user details:", err);
  //     navigate("/login"); // Redirect to login if user not found
  //   }
  // };

   // const handleSearch = (e) => {
  //   const value = e.target.value.toLowerCase();
  //   setSearch(value);
  //   if (value === "") {
  //     setPosts(allPosts);
  //   }
  //   const filteredPosts = allPosts.filter((post) =>
  //     post.skills.some((skill) => skill.toLowerCase().includes(value))
  //   );
  //   setPosts(filteredPosts);
  // };







   // if (action === "Accepted") {
            //     const spaceName = random();
            //     try {
            //         const { data: { invitation } } = await axios.get(`${import.meta.env.VITE_REACT_APP_BACKEND_URL}/invitation/get-invite-by-id/${id}`);
            //         const receiverUserId = invitation?.senderId;
            //         const postUser = await axios.post(`${import.meta.env.VITE_REACT_APP_BACKEND_URL}/user/getUser`, { _id: receiverUserId })
            //         const postUsername = postUser?.data?.username;
            //         const members = [username, postUsername];

            //         await axios.post(`${import.meta.env.VITE_REACT_APP_BACKEND_URL}/space/create-space`, {
            //             admin: username,
            //             members,
            //             spaceName: spaceName,
            //             chatPic: postUser?.data?.profilePic || profile_img,
            //         });
            //         // alert(`Request ${action}`)
            //     } catch (error) {
            //         console.error(error);
            //     }
            // }




            // setUsers((prevUsers) => {
      //   return prevUsers.filter((user) => user.username !== senderUserName);
      // });




      const message = `Your invitation to ${invitation.recipientUserName} was ${status}.`;
    const notification = await Notification.findOneAndUpdate(
      { userId: invitation.senderUserName },
      {
        $push: { messages: { message } },
      },
      { upsert: true, new: true, setDefaultsOnInsert: true }
    );

    import mongoose from "mongoose";

const notificationSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    unique: true,
    required: true
  },
  messages: [
    {
      message: { type: String, required: true },
      status: { type: String, enum: ['unread', 'read'], default: 'unread' },
      createdAt: { type: Date, default: Date.now },
    }
  ],
  createdAt: { type: Date, default: Date.now },
}, {
  timestamps: true,
});

notificationSchema.index({ userId: 1 }, { unique: true });

const Notification = mongoose.model('Notification', notificationSchema);

export default Notification;

import Notification from "../models/notifications.js";

export const getNotification = async (req, res) => {
    try {
      const { userId } = req.body;
      if (!userId) {
        return res.status(400).json({ error: "User ID is required." });
      }
      const notifications = await Notification.find({userId: userId});
      res.status(200).json(notifications);
    } catch (err) {
      res.status(500).json({ error: "Failed to fetch invitations." });
    }
  };


   const handleLike = () => {
    if (liked) {
      return;
    }
    // console.log(randomstring.generate(7));
    Axios.post(`${import.meta.env.VITE_REACT_APP_BACKEND_URL}/post/post-like`, obj).then((res) => {
      console.log(res.data.message);
      setLiked(true);
      setLikeCount(likeCount + 1);
    });
  };

  const handleDislike = () => {
    if (!liked) {
      return;
    }
    // console.log("dislike clicked!")
    Axios.post(`${import.meta.env.VITE_REACT_APP_BACKEND_URL}/post/post-dislike`, obj).then((res) => {
      console.log(res.data.message);
      setLiked(false);
      setLikeCount(likeCount - 1);
    });
  };

  <div className="like-con flex items-center space-x-3">
              {liked ? (
                <img
                  src={heart_filled}
                  alt="liked"
                  className="cursor-pointer w-6 h-6"
                  onClick={handleDislike}
                />
              ) : (
                <img
                  src={heart_outlined}
                  alt="not liked"
                  className="cursor-pointer w-6 h-6"
                  onClick={handleLike}
                />
              )}
              <p className="likes text-white text-lg font-semibold">{post?.likes ? likeCount : 0}</p>
            </div>

            const [liked, setLiked] = useState(false);
  const [likeCount, setLikeCount] = useState(post?.likes?.length);

   useEffect(() => {
    if (post?.likes.some((like) => like.username === username)) {
      setLiked(true);
    }
  }, []);

   // const liked = post.likes.some(like => like.username === username);
  const obj = {
    id: post?._id,
    username: username,
  };